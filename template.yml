---
- name: Clone RHEL 8 VM and apply cloud-init
  hosts: server
  tasks:
    - name: Create cloud-init user-data file
      copy:
        content: |
          #cloud-config
          ssh_pwauth: True
          network: {config: disabled}
          users:
          - default
            ssh_pwauth: true
          - name: admin
            groups: wheel
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
            lock_passwd: true
            ssh_authorized_keys:
            - "{{ item.value.ssh_public_key }}"

          runcmd:
          - 'systemctl disable --now firewalld.service'
          - 'nmcli con add con-name "{{ item.value.network_name }}" ifname enp1s0 type ethernet connection.autoconnect yes'
          - 'nmcli con mod "{{ item.value.network_name }}" ipv4.address "{{ item.value.ip_address }}/24" ipv4.gateway "{{ item.value.gateway }}" ipv4.dns "{{ item.value.dns }}" ipv4.method manual'
          - 'nmcli con down "{{ item.value.network_name }}"'
          - 'nmcli con up "{{ item.value.network_name }}"'
          - 'timedatectl set-timezone Asia/Seoul'
          - 'sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/" /etc/ssh/sshd_config'
          - 'echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config.d/01-permitrootlogin.conf'
          - 'echo 'PasswordAuthentication yes' >>  /etc/ssh/sshd_config.d/01-permitrootlogin.conf'
          - 'chmod +x /etc/rc.local'
          - 'systemctl restart sshd.service'
          - 'sed -i "/server .* iburst/d" /etc/chrony.conf'
          - 'sed -i "/^# Please consider.*$/a\server time.bora.net iburst" /etc/chrony.conf'
          - 'chmod o-rwx /usr/bin/su'
          - 'sed -i "s/SELINUX=enforcing/SELINUX=disabled/" /etc/selinux/config'
          - 'setenforce 0'
          - 'sed -i "s/^PASS_MAX_DAYS.*$/PASS_MAX_DAYS   90/" /etc/login.defs'
          - 'sed -i "s/^PASS_MIN_LEN.*$/PASS_MIN_LEN    9/" /etc/login.defs'
          - 'touch /etc/cloud/cloud-init.disabled'

        dest: /root/user-data
      with_dict: "{{ penta_vm }}"

    - name: Create cloud-init meta-data file
      copy:
        content: |
          instance-id: "penta_vm"
          local-hostname: user
        dest: /root/meta-data

    - name: Generate cloud-init ISO
      command: genisoimage -output {{ item.value.cloud_init_iso }} -volid cidata -joliet -rock /root/user-data /root/meta-data
      with_dict: "{{ penta_vm }}"
    - name: Clone VM
      command: >
        virt-clone
        --original "{{ item.value.source_vm }}"
        --name "{{ item.value.new_vm_name }}"
        --auto-clone
      with_dict: "{{ penta_vm }}"

    - name: Get cloned VM disk path
      command: virsh domblklist --domain "{{ item.value.new_vm_name }}"
      register: domblklist_output
      with_dict: "{{ penta_vm }}"


    - name: Debug disk path
      debug:
        msg: "{{ domblklist_output.results }}"

    - name: Extract disk path
      set_fact:
        vm_disk_path: "{{ vm_disk_paths  | default({}) | combine({item.item.key: item.stdout_lines[2].split()[1]}) }}"
      loop: "{{ domblklist_output.results | list }}"
      when: item.stdout_lines | length > 2

    - name: Debug extracted disk paths
      debug:
        var: vm_disk_path


    - name: Get current disk size
      command: qemu-img info --output json "{{ vm_disk_path.vm }}"
      register: disk_info

    - name: Parse disk info JSON
      set_fact:
        parsed_disk_info: "{{ disk_info.stdout | from_json }}"

    - name: Set current & desire disk size
      set_fact:
        current_size: "{{ parsed_disk_info['virtual-size'] | int}}"
        desired_size: "{{ item.value.disk_size }}G"
      with_dict: "{{ penta_vm }}"

    - debug:
        var: current_size
        var: desired_size

    - name: Compare desired size with current size
      set_fact:
        size_difference: "{{ (desired_size | human_to_bytes) - (current_size | int) | int}}"

    - debug:
        var: size_difference


    - name: Check if disk optimization is needed
      set_fact:
        optimize_needed: "{{ (size_difference | int) < 0 }}"

    - name: Set Expansion disk
      set_fact:
        expansion_needed: "{{ (size_difference | int) > 0 }}" 

    - name: Log optimization requirement
      debug:
        msg: "Disk optimization is recommended due to size difference."
      when: optimize_needed

    - name: Create temporary file name for image
      set_fact:
        convert_image: "{{ item.value.disk_path}}/{{ item.value.qcow_name }}.{{ item.value.file_type }}"
      with_dict: "{{ penta_vm }}"
      
    - name: Optimize qcow2 image (convert to thin provisioning)
      command: >
        qemu-img convert -O qcow2 -o preallocation=off "{{ vm_disk_path.vm }}" "{{ convert_image }}"
      when: optimize_needed
      register: optimize_result

    - name: Get current VM configuration
      virt:
        command: get_xml
        name: "{{ item.value.new_vm_name }}"
      register: vm_xml
      with_dict: "{{ penta_vm }}"
 

    - name: Update VM configuration with new disk image
      virt:
        command: define
        xml: >
          {{ vm_xml.results[0].get_xml | regex_replace(vm_disk_path.vm, convert_image) }}
  

    - name: Remove old disk image
      file:
        path: "{{ vm_disk_path.vm }}"
        state: absent
      when: optimize_needed and optimize_result.rc == 0
    
    #- name: Rename optimized image to original name
      #command: >
       # mv "{{ convert_image }}"  "{{ vm_disk_path }}"
      #when: optimize_needed and optimize_result.rc == 0
     # with_dict: "{{ penta_vm }}"
      
    - name: Create temporary file name for expansiond image
      set_fact:
        expand_image: "{{ vm_disk_path.vm }}"
      when: expansion_needed
      with_dict: "{{ penta_vm }}"
      
    - name: Resize qcow2 image (if expansion is needed)
      command: >
        qemu-img resize "{{ expand_image }}" {{ desired_size }}
      when: expansion_needed
      register: expansion_result
      
    - name: Rename optimized image to original name
      command: >
         mv "{{ expand_image }}" "{{ convert_image }}"
      when: expansion_needed and expansion_result.rc == 0
      with_dict: "{{ penta_vm }}"
    
      


      
    - name: Remove old disk image
      file:
        path: "{{ vm_disk_path.vm }}"
        state: absent
      when: expansion_needed and expansion_result.rc == 0
    

      
    - name: If the image is the same size
      command: mv "{{ vm_disk_path.vm }}" "{{ convert_image }}"
      when:  "{{ (size_difference | int) == 0 }}" 
      with_dict: "{{ penta_vm }}"
      
    - name: Set VM memory
      command: virsh setmaxmem {{ item.value.new_vm_name }} {{ item.value.memory_gb | int * 2 }}G --config
      with_dict: "{{ penta_vm }}"

    - name: Set VM current memory
      command: virsh setmem {{ item.value.new_vm_name }} {{ item.value.memory_gb }}G --config
      with_dict: "{{ penta_vm }}"

    - name: Set VM CPUs
      command: virsh setvcpus {{ item.value.new_vm_name }} {{ item.value.vcpus }} --config --maximum
      with_dict: "{{ penta_vm }}"

    - name: Attach cloud-init ISO
      command: virsh attach-disk {{ item.value.new_vm_name }} {{ item.value.cloud_init_iso }} sdb --type cdrom --mode readonly --config
      with_dict: "{{ penta_vm }}"

    - name: Start VM
      virt:
        name: "{{ item.value.new_vm_name }}"
        state: running
      with_dict: "{{ penta_vm }}"


    - name: Detach cloud-init ISO
      command: virsh detach-disk {{ item.value.new_vm_name }} sdb --config
      delay: 15
      with_dict: "{{ penta_vm }}"

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /root/user-data
        - /root/meta-data
        
    - name: Clean up cloud_init_iso files
      file:
        path: "{{ item.value.cloud_init_iso }}"
        state: absent
      loop: "{{ penta_vm | dict2items }}"
      when: item.value.cloud_init_iso is defined
